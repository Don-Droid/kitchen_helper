#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    May 08, 2021 10:52:29 PM EDT  platform: Windows NT

import sys
import mysql.connector
import time


mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
mycursor = mydb.cursor()

mycursor.execute("select * from foods")
myfoods = mycursor.fetchall()

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global food
    food = tk.StringVar()
    global sday
    sday = tk.StringVar()
    sday.set('sday')
    global smonth
    smonth = tk.StringVar()
    smonth.set('smonth')
    global syear
    syear = tk.StringVar()
    syear.set('syear')
    global eday
    eday = tk.StringVar()
    eday.set('eday')
    global emonth
    emonth = tk.StringVar()
    emonth.set('emonth')
    global eyear
    eyear = tk.StringVar()
    eyear.set('eyear')

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def back():
    destroy_window()
    sys.stdout.flush()

def show():
    global sdate
    sdate = sday.get()+"-"+smonth.get()+"-"+syear.get()
    global edate
    edate = eday.get()+"-"+emonth.get()+"-"+eyear.get()

    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()

    mycursor.execute("select item, quantity, date from food_used")
    myresult = mycursor.fetchall()
    usage = []
    amount = []
    dietList = []
    entry = ""
    space = "_"
    for row in myresult:
        idate = time.strptime(row[2], "%d-%m-%Y")
        start = time.strptime(sdate, "%d-%m-%Y")
        end = time.strptime(edate, "%d-%m-%Y")
        if (idate >= start) and (idate <= end):
            usage.append(row[0])
            amount.append(float(row[1]))
           
    for i in range(len(usage)):
        foo = usage[i]
        amo = amount[i]
        for row in myfoods:
            if row[1] == foo:
                pro = float((float(row[2])/100000) * amo * 28349.5)
                car = (float(row[3])/100000) * amo * 28349.5
                iro = (float(row[4])/100000) * amo * 28349.5
                vit = (float(row[5])/100000) * amo * 28349.5
                fat = (float(row[6])/100000) * amo * 28349.5

                entry = entry + str(row[1]) + (space * (10 - len(row[1]))) + "{:.1f}".format(amo) + (space * (10 - (len("{:.1f}".format(amo))))) + "{:.1f}".format(pro) + (space * (10 - len("{:.1f}".format(pro)))) + "{:.1f}".format(car) + (space * (11 - len("{:.1f}".format(car)))) + "{:.1f}".format(iro) + (space * (9 - len("{:.1f}".format(iro)))) + "{:.1f}".format(vit) + (space * (9 - len("{:.1f}".format(vit)))) + "{:.1f}".format(fat)+ " " 
                
                dietList.append(entry)
                
    for i in dietList:
        food.set(i)
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import diet
    diet.vp_start_gui()




































































