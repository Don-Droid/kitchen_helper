#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 24, 2021 07:01:08 PM EDT  platform: Windows NT
import webcrawler
import webcrawler2
import webcrawler3
import sys
import mysql.connector
import heapq
import recipe
import json
import webbrowser

import os
import meals


pitems = []


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def clearTable():
    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()
    mycursor.execute("DROP TABLE IF EXISTS recipes")
    mycursor.close()
    mydb.commit()
    mydb.close()

    
def set_Tk_var():
    clearTable()
    global item_list
    item_list = tk.StringVar()
    global foodlist
    foodlist = dbManager()
    item_list.set(foodlist)
    global url
    url = tk.StringVar()
    global magnitude
    magnitude = tk.IntVar()
    global message
    message = tk.StringVar()
    message.set('')
    global urls
    urls = tk.StringVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def dbManager2(t,i,m,mp):    
    title = str(t)
    ingredients = json.dumps(i)
    method = json.dumps(m)
    m_pantry = json.dumps(mp)
    
    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()       
    mycursor.execute("Create table IF NOT EXISTS recipes(id INT AUTO_INCREMENT PRIMARY KEY, title varchar(200), ingredients varchar(10000), method text(10000), m_pantry varchar (1000))")
    web_data = "Insert into recipes(title,ingredients,method,m_pantry) values(%s,%s,%s,%s)"
    
    entry = [title,ingredients,method,m_pantry]
    mycursor.execute(web_data, entry)
    
    mydb.commit()

def dbManager():
    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()
    
    mycursor.execute("select item from pantry where quantity > 0")
    
    myresult = mycursor.fetchall()
    lis = []
    for result in myresult:
        lis.append(result[0])
    return (lis)


def checker():
    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()
    mycursor.execute("DROP TABLE IF EXISTS lrecipes")
    mydb.commit()
    pq = []
    global pitems
    if (magnitude.get() == 2):
        search = (webcrawler.meal_spider() + webcrawler2.meal_spider())
    elif (magnitude.get() == 3):
        search = (webcrawler.meal_spider() + webcrawler2.meal_spider() + webcrawler3.meal_spider())
    else:
        search = (webcrawler.meal_spider())
        
    for i in search:
        tit = (i[0])
        ing = (i[1])
        met = (i[2])
        pri = check(foodlist, ing)
        heapq.heappush(pq, (pri * -1, tit, ing, met,pitems))
        pitems = []
    global menus
    menus = pq
    return pq


def recipes():
    while len(menus) > 0:
        menu = heapq.heappop(menus)
        title = menu[1][0]
        ingredients =(menu[2][0]).split("\n")
        methods = (menu[3][0]).split("\n")
        mpantry = (menu[4])
        dbManager2(title,ingredients,methods,mpantry)

    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()       
    mycursor.execute("Create table IF NOT EXISTS lrecipes(id INT, title varchar(200), ingredients varchar(10000), method text(10000), m_pantry varchar (1000))")
    mycursor.execute("Insert into lrecipes select * from recipes where id < '31'")
    mydb.commit()



def run():
    recipe.create_Toplevel1(root)

def check(list1, list2):
    counter = 0
    for i in list1:
        if i in list2[0] or i.lower() in list2[0] or i.lower() in (list2[0]).lower() or i in (list2[0]).lower():
            counter += 1
            pitems.append(i)
    return (counter)

def loc():
    run()
    sys.stdout.flush()
    

    
def web():
    message.set('Searching, Please wait.')
    checker()
    recipes()
    run()

def check2():
    webbrowser.open(urls.get())
    sys.stdout.flush()
  
def back():
    destroy_window()


def send():
    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()       
    web_data = "Insert into urls(url) values(%s)"
    
    entry = [url.get()]
    mycursor.execute(web_data, entry)
    
    mydb.commit()

    w.TCombobox1.configure(values=meals.updateUrls())
    sys.stdout.flush()


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import meals
    meals.vp_start_gui()


