#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Mar 23, 2021 01:14:15 AM EDT  platform: Windows NT


import sys
import meals_support
import mysql.connector
import json
import shopping
import prepares

                   

index = 0
lis = []

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global pantry
    pantry = tk.StringVar()
    pantry.set(json.loads(dbManager()[0][4]))
    global ingre
    ingre = tk.StringVar()
    ingre.set(json.loads(dbManager()[0][2]))
    global method
    method = tk.StringVar()
    method.set(json.loads(dbManager()[0][3]))
    global title
    title = tk.StringVar()
    title.set(dbManager()[0][1])



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def dbManager():
    mydb = mysql.connector.connect(host="localhost", user="root", password="pA$$123", database="khelperdb")
    mycursor = mydb.cursor()
    try:
        mycursor.execute("select * from recipes")
    except mysql.connector.errors.ProgrammingError:
        mycursor.execute("select * from local_recipes")
        
    myresult = mycursor.fetchall()
    global lis
    lis = []
    for result in myresult:
        lis.append(result)
    return lis

def setter():
    if (index >= 0):
        title.set(lis[index][1])
        ingre.set(json.loads(lis[index][2]))
        method.set(json.loads(lis[index][3]))
        pantry.set(json.loads(lis[index][4]))

def rback():
    global index
    if (index > 0):
        index -= 1
        setter()
        sys.stdout.flush()

        
def back():
    destroy_window()
    sys.stdout.flush()

def prepare():
    prepares.create_Toplevel1(root)
    sys.stdout.flush()

def shoppingList():
    shopping.create_Toplevel1(root)
    sys.stdout.flush()
    

def next():
    global index
    index += 1
    setter()
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import recipe
    recipe.vp_start_gui()




